#* @vtlvariable name="typeContext" type="name.pehl.piriti.rebind.type.TypeContext" *#
#set($modelType = $typeContext.type.qualifiedSourceName)
#set($modelParameterizedType = $typeContext.type.parameterizedQualifiedSourceName)

package ${typeContext.rwType.package.name};

import static java.util.logging.Level.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gwt.core.client.GWT;

import name.pehl.piriti.commons.client.InstanceContextHolder;
import name.pehl.piriti.json.client.AbstractJsonReader;
import name.pehl.piriti.json.client.JsonReader;
import name.pehl.totoe.json.client.JsonPath;

import com.google.gwt.json.client.JSONArray;
import com.google.gwt.json.client.JSONObject;
import com.google.gwt.json.client.JSONString;
import com.google.gwt.json.client.JSONValue;
import com.google.gwt.json.client.JSONParser;

public class $implName extends AbstractJsonReader<$modelParameterizedType> implements $typeContext.rwType.qualifiedSourceName 
{
#if ($paramTypes)
    private final List<Class<?>> typeClasses = new ArrayList<Class<?>>();
#end
    // ----------------------------------------------------------- constructors

    public $implName() 
    {
#if ($paramTypes)
#foreach($paramType in $paramTypes)
        typeClasses.add(${paramType.qualifiedSourceName}.class);
#end
        this.jsonRegistry.register(${modelType}.class, typeClasses, this);
#else
        this.jsonRegistry.register(${modelType}.class, this);
#end
    }
    
    
    // ------------------------------------------------------------ new methods
    
    protected $modelParameterizedType newModel(JSONObject jsonObject)
    {
        $modelParameterizedType model = null;
        #if ($typeContext.instanceCreator)
            $typeContext.instanceCreator.qualifiedSourceName instanceCreator = GWT.create(${typeContext.instanceCreator.qualifiedSourceName}.class);
            model = instanceCreator.newInstance(jsonObject);
        #else
            model = GWT.create(${modelType}.class); 
        #end
        return model;
    }

    // ----------------------------------------- ids, properties and references

    protected $modelParameterizedType readId(JSONObject jsonObject)
    {
        // IDs in JSON are nor supported!
        return newModel(jsonObject);
    }


    protected $modelParameterizedType readProperties(JSONObject jsonObject, $modelParameterizedType model) 
    {
        if (jsonObject != null) 
        {
            #foreach ($property in $typeContext.properties)
				#set($valueType = $property.type.qualifiedSourceName)
				#set($parameterizedValueType = $property.type.parameterizedQualifiedSourceName)
				#set($value = $property.variables.value)
                #set($jsonValue = $property.variables.newVariable("JsonValue"))
				#set($converter = $property.variables.newVariable("Converter"))
				
                // parsing template $property.templates.main
				if (logger.isLoggable(FINE)) 
				{
				    logger.log(FINE, "Processing $parameterizedValueType $property.name");
				}
				$parameterizedValueType $value = null;
			    #if ($property.jsonPath)
			        JSONValue $jsonValue = JsonPath.select(jsonObject, "$property.pathOrName");
			    #else
			        JSONValue $jsonValue = jsonObject.get("$property.pathOrName");
			    #end
			    if ($jsonValue != null)
                {
                    ## Here happens the actual reading / conversion from $jsonValue to $value
                    #parse($property.templates.main)
                    #assignValue()
			    }
            #end
        }
        return model;
    }


    protected $modelParameterizedType readIdRefs(JSONObject jsonObject, $modelParameterizedType model)
    {
        // References in JSON are nor supported!
        return model;
    }
}
